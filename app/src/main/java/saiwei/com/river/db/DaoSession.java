package saiwei.com.river.db;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import saiwei.com.river.model.River;
import saiwei.com.river.model.User;
import saiwei.com.river.model.XunheRecord;

import saiwei.com.river.db.RiverDao;
import saiwei.com.river.db.UserDao;
import saiwei.com.river.db.XunheRecordDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig riverDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig xunheRecordDaoConfig;

    private final RiverDao riverDao;
    private final UserDao userDao;
    private final XunheRecordDao xunheRecordDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        riverDaoConfig = daoConfigMap.get(RiverDao.class).clone();
        riverDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        xunheRecordDaoConfig = daoConfigMap.get(XunheRecordDao.class).clone();
        xunheRecordDaoConfig.initIdentityScope(type);

        riverDao = new RiverDao(riverDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        xunheRecordDao = new XunheRecordDao(xunheRecordDaoConfig, this);

        registerDao(River.class, riverDao);
        registerDao(User.class, userDao);
        registerDao(XunheRecord.class, xunheRecordDao);
    }
    
    public void clear() {
        riverDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
        xunheRecordDaoConfig.clearIdentityScope();
    }

    public RiverDao getRiverDao() {
        return riverDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public XunheRecordDao getXunheRecordDao() {
        return xunheRecordDao;
    }

}
