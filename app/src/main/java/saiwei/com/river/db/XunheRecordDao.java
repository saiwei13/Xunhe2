package saiwei.com.river.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import saiwei.com.river.model.XunheRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XUNHE_RECORD".
*/
public class XunheRecordDao extends AbstractDao<XunheRecord, Long> {

    public static final String TABLENAME = "XUNHE_RECORD";

    /**
     * Properties of entity XunheRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RecordId = new Property(0, long.class, "recordId", true, "_id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property ReportRiver = new Property(2, String.class, "reportRiver", false, "REPORT_RIVER");
        public final static Property ReportRiverId = new Property(3, String.class, "reportRiverId", false, "REPORT_RIVER_ID");
        public final static Property TourTime = new Property(4, String.class, "tourTime", false, "TOUR_TIME");
        public final static Property TotalTime = new Property(5, String.class, "totalTime", false, "TOTAL_TIME");
        public final static Property IsHDZZ = new Property(6, String.class, "isHDZZ", false, "IS_HDZZ");
        public final static Property IsHDBJ = new Property(7, String.class, "isHDBJ", false, "IS_HDBJ");
        public final static Property IsWSPK = new Property(8, String.class, "isWSPK", false, "IS_WSPK");
        public final static Property IsSSWF = new Property(9, String.class, "isSSWF", false, "IS_SSWF");
        public final static Property IsHALJ = new Property(10, String.class, "isHALJ", false, "IS_HALJ");
        public final static Property IsHDSZ = new Property(11, String.class, "isHDSZ", false, "IS_HDSZ");
        public final static Property IsHDWN = new Property(12, String.class, "isHDWN", false, "IS_HDWN");
        public final static Property IsRHWK = new Property(13, String.class, "isRHWK", false, "IS_RHWK");
        public final static Property IsPHSS = new Property(14, String.class, "isPHSS", false, "IS_PHSS");
        public final static Property IsFFBY = new Property(15, String.class, "isFFBY", false, "IS_FFBY");
        public final static Property IsHZTS = new Property(16, String.class, "isHZTS", false, "IS_HZTS");
        public final static Property IsYXSZ = new Property(17, String.class, "isYXSZ", false, "IS_YXSZ");
        public final static Property XyJsonInfos = new Property(18, String.class, "xyJsonInfos", false, "XY_JSON_INFOS");
        public final static Property ComplaintInfos = new Property(19, String.class, "complaintInfos", false, "COMPLAINT_INFOS");
    }


    public XunheRecordDao(DaoConfig config) {
        super(config);
    }
    
    public XunheRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XUNHE_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: recordId
                "\"USERID\" TEXT," + // 1: userid
                "\"REPORT_RIVER\" TEXT," + // 2: reportRiver
                "\"REPORT_RIVER_ID\" TEXT," + // 3: reportRiverId
                "\"TOUR_TIME\" TEXT," + // 4: tourTime
                "\"TOTAL_TIME\" TEXT," + // 5: totalTime
                "\"IS_HDZZ\" TEXT," + // 6: isHDZZ
                "\"IS_HDBJ\" TEXT," + // 7: isHDBJ
                "\"IS_WSPK\" TEXT," + // 8: isWSPK
                "\"IS_SSWF\" TEXT," + // 9: isSSWF
                "\"IS_HALJ\" TEXT," + // 10: isHALJ
                "\"IS_HDSZ\" TEXT," + // 11: isHDSZ
                "\"IS_HDWN\" TEXT," + // 12: isHDWN
                "\"IS_RHWK\" TEXT," + // 13: isRHWK
                "\"IS_PHSS\" TEXT," + // 14: isPHSS
                "\"IS_FFBY\" TEXT," + // 15: isFFBY
                "\"IS_HZTS\" TEXT," + // 16: isHZTS
                "\"IS_YXSZ\" TEXT," + // 17: isYXSZ
                "\"XY_JSON_INFOS\" TEXT," + // 18: xyJsonInfos
                "\"COMPLAINT_INFOS\" TEXT);"); // 19: complaintInfos
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XUNHE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, XunheRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRecordId());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String reportRiver = entity.getReportRiver();
        if (reportRiver != null) {
            stmt.bindString(3, reportRiver);
        }
 
        String reportRiverId = entity.getReportRiverId();
        if (reportRiverId != null) {
            stmt.bindString(4, reportRiverId);
        }
 
        String tourTime = entity.getTourTime();
        if (tourTime != null) {
            stmt.bindString(5, tourTime);
        }
 
        String totalTime = entity.getTotalTime();
        if (totalTime != null) {
            stmt.bindString(6, totalTime);
        }
 
        String isHDZZ = entity.getIsHDZZ();
        if (isHDZZ != null) {
            stmt.bindString(7, isHDZZ);
        }
 
        String isHDBJ = entity.getIsHDBJ();
        if (isHDBJ != null) {
            stmt.bindString(8, isHDBJ);
        }
 
        String isWSPK = entity.getIsWSPK();
        if (isWSPK != null) {
            stmt.bindString(9, isWSPK);
        }
 
        String isSSWF = entity.getIsSSWF();
        if (isSSWF != null) {
            stmt.bindString(10, isSSWF);
        }
 
        String isHALJ = entity.getIsHALJ();
        if (isHALJ != null) {
            stmt.bindString(11, isHALJ);
        }
 
        String isHDSZ = entity.getIsHDSZ();
        if (isHDSZ != null) {
            stmt.bindString(12, isHDSZ);
        }
 
        String isHDWN = entity.getIsHDWN();
        if (isHDWN != null) {
            stmt.bindString(13, isHDWN);
        }
 
        String isRHWK = entity.getIsRHWK();
        if (isRHWK != null) {
            stmt.bindString(14, isRHWK);
        }
 
        String isPHSS = entity.getIsPHSS();
        if (isPHSS != null) {
            stmt.bindString(15, isPHSS);
        }
 
        String isFFBY = entity.getIsFFBY();
        if (isFFBY != null) {
            stmt.bindString(16, isFFBY);
        }
 
        String isHZTS = entity.getIsHZTS();
        if (isHZTS != null) {
            stmt.bindString(17, isHZTS);
        }
 
        String isYXSZ = entity.getIsYXSZ();
        if (isYXSZ != null) {
            stmt.bindString(18, isYXSZ);
        }
 
        String xyJsonInfos = entity.getXyJsonInfos();
        if (xyJsonInfos != null) {
            stmt.bindString(19, xyJsonInfos);
        }
 
        String complaintInfos = entity.getComplaintInfos();
        if (complaintInfos != null) {
            stmt.bindString(20, complaintInfos);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, XunheRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRecordId());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String reportRiver = entity.getReportRiver();
        if (reportRiver != null) {
            stmt.bindString(3, reportRiver);
        }
 
        String reportRiverId = entity.getReportRiverId();
        if (reportRiverId != null) {
            stmt.bindString(4, reportRiverId);
        }
 
        String tourTime = entity.getTourTime();
        if (tourTime != null) {
            stmt.bindString(5, tourTime);
        }
 
        String totalTime = entity.getTotalTime();
        if (totalTime != null) {
            stmt.bindString(6, totalTime);
        }
 
        String isHDZZ = entity.getIsHDZZ();
        if (isHDZZ != null) {
            stmt.bindString(7, isHDZZ);
        }
 
        String isHDBJ = entity.getIsHDBJ();
        if (isHDBJ != null) {
            stmt.bindString(8, isHDBJ);
        }
 
        String isWSPK = entity.getIsWSPK();
        if (isWSPK != null) {
            stmt.bindString(9, isWSPK);
        }
 
        String isSSWF = entity.getIsSSWF();
        if (isSSWF != null) {
            stmt.bindString(10, isSSWF);
        }
 
        String isHALJ = entity.getIsHALJ();
        if (isHALJ != null) {
            stmt.bindString(11, isHALJ);
        }
 
        String isHDSZ = entity.getIsHDSZ();
        if (isHDSZ != null) {
            stmt.bindString(12, isHDSZ);
        }
 
        String isHDWN = entity.getIsHDWN();
        if (isHDWN != null) {
            stmt.bindString(13, isHDWN);
        }
 
        String isRHWK = entity.getIsRHWK();
        if (isRHWK != null) {
            stmt.bindString(14, isRHWK);
        }
 
        String isPHSS = entity.getIsPHSS();
        if (isPHSS != null) {
            stmt.bindString(15, isPHSS);
        }
 
        String isFFBY = entity.getIsFFBY();
        if (isFFBY != null) {
            stmt.bindString(16, isFFBY);
        }
 
        String isHZTS = entity.getIsHZTS();
        if (isHZTS != null) {
            stmt.bindString(17, isHZTS);
        }
 
        String isYXSZ = entity.getIsYXSZ();
        if (isYXSZ != null) {
            stmt.bindString(18, isYXSZ);
        }
 
        String xyJsonInfos = entity.getXyJsonInfos();
        if (xyJsonInfos != null) {
            stmt.bindString(19, xyJsonInfos);
        }
 
        String complaintInfos = entity.getComplaintInfos();
        if (complaintInfos != null) {
            stmt.bindString(20, complaintInfos);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public XunheRecord readEntity(Cursor cursor, int offset) {
        XunheRecord entity = new XunheRecord( //
            cursor.getLong(offset + 0), // recordId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // reportRiver
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // reportRiverId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tourTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // totalTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isHDZZ
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isHDBJ
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isWSPK
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // isSSWF
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // isHALJ
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // isHDSZ
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // isHDWN
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // isRHWK
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // isPHSS
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // isFFBY
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // isHZTS
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // isYXSZ
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // xyJsonInfos
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // complaintInfos
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, XunheRecord entity, int offset) {
        entity.setRecordId(cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReportRiver(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReportRiverId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTourTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotalTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsHDZZ(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsHDBJ(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsWSPK(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsSSWF(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsHALJ(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsHDSZ(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsHDWN(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsRHWK(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsPHSS(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsFFBY(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsHZTS(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsYXSZ(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setXyJsonInfos(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setComplaintInfos(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(XunheRecord entity, long rowId) {
        entity.setRecordId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(XunheRecord entity) {
        if(entity != null) {
            return entity.getRecordId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(XunheRecord entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
