package saiwei.com.river.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import saiwei.com.river.model.River;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RIVER".
*/
public class RiverDao extends AbstractDao<River, String> {

    public static final String TABLENAME = "RIVER";

    /**
     * Properties of entity River.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IsNewRecord = new Property(0, boolean.class, "isNewRecord", false, "IS_NEW_RECORD");
        public final static Property RiverBaseinfoId = new Property(1, String.class, "riverBaseinfoId", true, "RIVER_BASEINFO_ID");
        public final static Property CountyCode = new Property(2, String.class, "countyCode", false, "COUNTY_CODE");
        public final static Property TownCode = new Property(3, String.class, "townCode", false, "TOWN_CODE");
        public final static Property RiverName = new Property(4, String.class, "riverName", false, "RIVER_NAME");
        public final static Property RiverLength = new Property(5, String.class, "riverLength", false, "RIVER_LENGTH");
        public final static Property CreateTime = new Property(6, long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(7, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property RelationPeople = new Property(8, int.class, "relationPeople", false, "RELATION_PEOPLE");
    }


    public RiverDao(DaoConfig config) {
        super(config);
    }
    
    public RiverDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RIVER\" (" + //
                "\"IS_NEW_RECORD\" INTEGER NOT NULL ," + // 0: isNewRecord
                "\"RIVER_BASEINFO_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: riverBaseinfoId
                "\"COUNTY_CODE\" TEXT," + // 2: countyCode
                "\"TOWN_CODE\" TEXT," + // 3: townCode
                "\"RIVER_NAME\" TEXT," + // 4: riverName
                "\"RIVER_LENGTH\" TEXT," + // 5: riverLength
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 6: createTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 7: updateTime
                "\"RELATION_PEOPLE\" INTEGER NOT NULL );"); // 8: relationPeople
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RIVER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, River entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIsNewRecord() ? 1L: 0L);
 
        String riverBaseinfoId = entity.getRiverBaseinfoId();
        if (riverBaseinfoId != null) {
            stmt.bindString(2, riverBaseinfoId);
        }
 
        String countyCode = entity.getCountyCode();
        if (countyCode != null) {
            stmt.bindString(3, countyCode);
        }
 
        String townCode = entity.getTownCode();
        if (townCode != null) {
            stmt.bindString(4, townCode);
        }
 
        String riverName = entity.getRiverName();
        if (riverName != null) {
            stmt.bindString(5, riverName);
        }
 
        String riverLength = entity.getRiverLength();
        if (riverLength != null) {
            stmt.bindString(6, riverLength);
        }
        stmt.bindLong(7, entity.getCreateTime());
        stmt.bindLong(8, entity.getUpdateTime());
        stmt.bindLong(9, entity.getRelationPeople());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, River entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIsNewRecord() ? 1L: 0L);
 
        String riverBaseinfoId = entity.getRiverBaseinfoId();
        if (riverBaseinfoId != null) {
            stmt.bindString(2, riverBaseinfoId);
        }
 
        String countyCode = entity.getCountyCode();
        if (countyCode != null) {
            stmt.bindString(3, countyCode);
        }
 
        String townCode = entity.getTownCode();
        if (townCode != null) {
            stmt.bindString(4, townCode);
        }
 
        String riverName = entity.getRiverName();
        if (riverName != null) {
            stmt.bindString(5, riverName);
        }
 
        String riverLength = entity.getRiverLength();
        if (riverLength != null) {
            stmt.bindString(6, riverLength);
        }
        stmt.bindLong(7, entity.getCreateTime());
        stmt.bindLong(8, entity.getUpdateTime());
        stmt.bindLong(9, entity.getRelationPeople());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public River readEntity(Cursor cursor, int offset) {
        River entity = new River( //
            cursor.getShort(offset + 0) != 0, // isNewRecord
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // riverBaseinfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // countyCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // townCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // riverName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // riverLength
            cursor.getLong(offset + 6), // createTime
            cursor.getLong(offset + 7), // updateTime
            cursor.getInt(offset + 8) // relationPeople
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, River entity, int offset) {
        entity.setIsNewRecord(cursor.getShort(offset + 0) != 0);
        entity.setRiverBaseinfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountyCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTownCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRiverName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRiverLength(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.getLong(offset + 6));
        entity.setUpdateTime(cursor.getLong(offset + 7));
        entity.setRelationPeople(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(River entity, long rowId) {
        return entity.getRiverBaseinfoId();
    }
    
    @Override
    public String getKey(River entity) {
        if(entity != null) {
            return entity.getRiverBaseinfoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(River entity) {
        return entity.getRiverBaseinfoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
